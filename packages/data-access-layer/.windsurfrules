# Data Access Layer Package Rules

This package provides TypeORM-based database access for the Monorepo Kit application.

## Package Structure
- `/src/entities` - Entity definitions (typed schemas)
- `/src/services` - Unit of work implementation
- `/src/index.ts` - Package exports

## Architecture Rules

### Entity Definitions
- All database entities MUST be defined in `/src/entities` folder
- Entities MUST use TypeORM decorators for schema definition
- Entity files MUST be named with `.entity.ts` suffix
- All entities MUST be typed schemas with proper TypeScript interfaces

### Service Implementation
- All data access services MUST be implemented in `/src/services` folder
- Service files MUST follow naming convention: `<Entity>DbService` (e.g. `UserDbService`, `PatientDbService`)
- Service files MUST be named with `.service.ts` suffix
- Services MUST implement unit of work pattern
- Only DbServices are allowed to be exported from this package
- TypeORM repositories can ONLY be used inside DbServices, never exposed directly

### Database Access Rules
- Use TypeORM for all database operations
- Repository pattern MUST be encapsulated within DbServices
- No direct repository access from outside this package
- All database operations MUST go through DbServices

### Export Rules
- Only DbServices are permitted in public exports
- TypeORM repositories MUST NOT be exported
- Entity definitions MAY be exported for typing purposes
- No internal implementation details should be exposed

### Naming Conventions
- Entity files: `*.entity.ts`
- Service files: `*.db-service.ts`
- Service classes: `<Entity>DbService`
- Interface definitions should follow TypeScript conventions

## Examples

### Entity Definition
```typescript
// src/entities/user.entity.ts
@Entity()
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  email: string;
}
```

### Service Implementation
```typescript
// src/services/user.db-service.ts
export class UserDbService {
  constructor(
    @InjectRepository(User)
    private userRepository: Repository<User>
  ) {}

  async findById(id: number): Promise<User | null> {
    return this.userRepository.findOne({ where: { id } });
  }
}
```

### Package Exports
```typescript
// src/index.ts
export { UserDbService } from './services/user.db-service';
export { User } from './entities/user.entity';
// DO NOT export repositories directly
```