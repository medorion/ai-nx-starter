import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TodoItemDto, CreateTodoItemDto, UpdateTodoItemDto, SubItemDto } from '@medorion/types';
import { BaseApiService } from '../../../services/base-api.service';
import { AppConfigService } from '../../../services/app-config.service';

/**
 * ApiTodoItemService - Angular service for TodoItemController
 * Auto-generated by gen-api-client.ts
 */
@Injectable({
  providedIn: 'root',
})
export class ApiTodoItemService extends BaseApiService {
  constructor(http: HttpClient, config: AppConfigService) {
    super(http, config);
  }

  /**
   * findAll - GET examples/todo-items//
   *
   * @param limit - Query parameter
   * @param offset - Query parameter
   * @param status - Query parameter
   * @param assignedTo - Query parameter
   * @param tags - Query parameter
   * @returns Observable<TodoItemDto[]>
   */
  findAll(
    limit?: number,
    offset?: number,
    status?: 'pending' | 'in_progress' | 'completed' | 'archived',
    assignedTo?: string,
    tags?: string[],
  ): Observable<TodoItemDto[]> {
    let params = new HttpParams();
    if (limit !== undefined) {
      params = params.set('limit', limit.toString());
    }
    if (offset !== undefined) {
      params = params.set('offset', offset.toString());
    }
    if (status !== undefined) {
      params = params.set('status', status.toString());
    }
    if (assignedTo !== undefined) {
      params = params.set('assignedTo', assignedTo.toString());
    }
    if (tags !== undefined) {
      params = params.set('tags', tags.toString());
    }
    return this.http.get<TodoItemDto[]>(`${this.BASE_URL}/examples/todo-items`, { params });
  }

  /**
   * getCount - GET examples/todo-items/count
   *
   * @param status - Query parameter
   * @returns Observable<{ count: number; }>
   */
  getCount(status?: 'pending' | 'in_progress' | 'completed' | 'archived'): Observable<{ count: number }> {
    let params = new HttpParams();
    if (status !== undefined) {
      params = params.set('status', status.toString());
    }
    return this.http.get<{ count: number }>(`${this.BASE_URL}/examples/todo-items/count`, { params });
  }

  /**
   * getOverdueTodos - GET examples/todo-items/overdue
   *
   * @returns Observable<TodoItemDto[]>
   */
  getOverdueTodos(): Observable<TodoItemDto[]> {
    return this.http.get<TodoItemDto[]>(`${this.BASE_URL}/examples/todo-items/overdue`);
  }

  /**
   * findById - GET examples/todo-items/:id
   *
   * @param id - Param parameter
   * @returns Observable<TodoItemDto>
   */
  findById(id: string): Observable<TodoItemDto> {
    let url = `${this.BASE_URL}/examples/todo-items/:id`;
    url = url.replace(':id', id.toString());
    return this.http.get<TodoItemDto>(url);
  }

  /**
   * create - POST examples/todo-items//
   *
   * @param createTodoItemDto - Body parameter
   * @returns Observable<TodoItemDto>
   */
  create(createTodoItemDto: CreateTodoItemDto): Observable<TodoItemDto> {
    return this.http.post<TodoItemDto>(`${this.BASE_URL}/examples/todo-items`, createTodoItemDto);
  }

  /**
   * update - PUT examples/todo-items/:id
   *
   * @param id - Param parameter
   * @param updateTodoItemDto - Body parameter
   * @returns Observable<TodoItemDto>
   */
  update(id: string, updateTodoItemDto: UpdateTodoItemDto): Observable<TodoItemDto> {
    let url = `${this.BASE_URL}/examples/todo-items/:id`;
    url = url.replace(':id', id.toString());
    return this.http.put<TodoItemDto>(url, updateTodoItemDto);
  }

  /**
   * addSubItem - POST examples/todo-items/:id/sub-items
   *
   * @param id - Param parameter
   * @param subItemDto - Body parameter
   * @returns Observable<TodoItemDto>
   */
  addSubItem(id: string, subItemDto: SubItemDto): Observable<TodoItemDto> {
    let url = `${this.BASE_URL}/examples/todo-items/:id/sub-items`;
    url = url.replace(':id', id.toString());
    return this.http.post<TodoItemDto>(url, subItemDto);
  }

  /**
   * removeSubItem - DELETE examples/todo-items/:id/sub-items/:index
   *
   * @param id - Param parameter
   * @param subItemIndex - Param parameter
   * @returns Observable<TodoItemDto>
   */
  removeSubItem(id: string, subItemIndex: number): Observable<TodoItemDto> {
    let url = `${this.BASE_URL}/examples/todo-items/:id/sub-items/:index`;
    url = url.replace(':id', id.toString());
    url = url.replace(':index', subItemIndex.toString());
    return this.http.delete<TodoItemDto>(url);
  }

  /**
   * updateStatus - PATCH examples/todo-items/:id/status/:status
   *
   * @param id - Param parameter
   * @param status - Param parameter
   * @returns Observable<TodoItemDto>
   */
  updateStatus(id: string, status: 'pending' | 'in_progress' | 'completed' | 'archived'): Observable<TodoItemDto> {
    let url = `${this.BASE_URL}/examples/todo-items/:id/status/:status`;
    url = url.replace(':id', id.toString());
    url = url.replace(':status', status.toString());
    return this.http.patch<TodoItemDto>(url, {});
  }

  /**
   * updateAssignee - PATCH examples/todo-items/:id/assignee
   *
   * @param id - Param parameter
   * @param body - Body parameter
   * @returns Observable<TodoItemDto>
   */
  updateAssignee(id: string, body: { assignedTo: string }): Observable<TodoItemDto> {
    let url = `${this.BASE_URL}/examples/todo-items/:id/assignee`;
    url = url.replace(':id', id.toString());
    return this.http.patch<TodoItemDto>(url, body);
  }

  /**
   * updatePriority - PATCH examples/todo-items/:id/priority
   *
   * @param id - Param parameter
   * @param body - Body parameter
   * @returns Observable<TodoItemDto>
   */
  updatePriority(id: string, body: { priority: number }): Observable<TodoItemDto> {
    let url = `${this.BASE_URL}/examples/todo-items/:id/priority`;
    url = url.replace(':id', id.toString());
    return this.http.patch<TodoItemDto>(url, body);
  }

  /**
   * delete - DELETE examples/todo-items/:id
   *
   * @param id - Param parameter
   * @returns Observable<void>
   */
  delete(id: string): Observable<void> {
    let url = `${this.BASE_URL}/examples/todo-items/:id`;
    url = url.replace(':id', id.toString());
    return this.http.delete<void>(url);
  }
}
