import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import {} from '@medorion/types';
import { BaseApiService } from '../../../services/base-api.service';
import { AppConfigService } from '../../../services/app-config.service';

/**
 * ApiExceptionsService - Angular service for ExceptionsController
 * Auto-generated by gen-api-client.ts
 */
@Injectable({
  providedIn: 'root',
})
export class ApiExceptionsService extends BaseApiService {
  constructor(http: HttpClient, config: AppConfigService) {
    super(http, config);
  }

  /**
   * triggerSessionExpired - GET examples/exceptions/session-expired
   *
   * @returns Observable<never>
   */
  triggerSessionExpired(): Observable<never> {
    return this.http.get<never>(`${this.BASE_URL}/examples/exceptions/session-expired`);
  }

  /**
   * triggerAppWarning - GET examples/exceptions/app-warning
   *
   * @returns Observable<never>
   */
  triggerAppWarning(): Observable<never> {
    return this.http.get<never>(`${this.BASE_URL}/examples/exceptions/app-warning`);
  }

  /**
   * triggerConcurrencyError - GET examples/exceptions/concurrency-error
   *
   * @returns Observable<never>
   */
  triggerConcurrencyError(): Observable<never> {
    return this.http.get<never>(`${this.BASE_URL}/examples/exceptions/concurrency-error`);
  }

  /**
   * triggerUnauthorizedLogin - GET examples/exceptions/unauthorized-login
   *
   * @returns Observable<never>
   */
  triggerUnauthorizedLogin(): Observable<never> {
    return this.http.get<never>(`${this.BASE_URL}/examples/exceptions/unauthorized-login`);
  }

  /**
   * triggerAppError - GET examples/exceptions/app-error
   *
   * @returns Observable<never>
   */
  triggerAppError(): Observable<never> {
    return this.http.get<never>(`${this.BASE_URL}/examples/exceptions/app-error`);
  }

  /**
   * getExceptionEndpoints - GET examples/exceptions//
   *
   * @returns Observable<{ message: string; endpoints: { path: string; method: string; exception: string; statusCode: number; description: string; }[]; }>
   */
  getExceptionEndpoints(): Observable<{
    message: string;
    endpoints: { path: string; method: string; exception: string; statusCode: number; description: string }[];
  }> {
    return this.http.get<{
      message: string;
      endpoints: { path: string; method: string; exception: string; statusCode: number; description: string }[];
    }>(`${this.BASE_URL}/examples/exceptions`);
  }
}
