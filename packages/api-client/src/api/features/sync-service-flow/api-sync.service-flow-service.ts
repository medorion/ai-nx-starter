import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SyncServiceFlowDto, QueryResultDto, SyncServiceFlowSearchOptionsDto, IMdWorkflow } from '@medorion/types';
import { BaseApiService } from '../../../services/base-api.service';
import { AppConfigService } from '../../../services/app-config.service';

/**
 * ApiSyncServiceFlowService - Angular service for SyncServiceFlowController
 * Auto-generated by gen-api-client.ts
 */
@Injectable({
  providedIn: 'root',
})
export class ApiSyncServiceFlowService extends BaseApiService {
  constructor(http: HttpClient, config: AppConfigService) {
    super(http, config);
  }

  /**
   * findAll - GET sync-service-flow//
   *
   * @param includeFlowDefinition - Query parameter
   * @param limit - Query parameter
   * @param offset - Query parameter
   * @returns Observable<SyncServiceFlowDto[]>
   */
  findAll(includeFlowDefinition?: boolean, limit?: number, offset?: number): Observable<SyncServiceFlowDto[]> {
    let params = new HttpParams();
    if (includeFlowDefinition !== undefined) {
      params = params.set('includeFlowDefinition', includeFlowDefinition.toString());
    }
    if (limit !== undefined) {
      params = params.set('limit', limit.toString());
    }
    if (offset !== undefined) {
      params = params.set('offset', offset.toString());
    }
    return this.http.get<SyncServiceFlowDto[]>(`${this.BASE_URL}/sync-service-flow`, { params });
  }

  /**
   * count - GET sync-service-flow/count
   *
   * @returns Observable<{ count: number; }>
   */
  count(): Observable<{ count: number }> {
    return this.http.get<{ count: number }>(`${this.BASE_URL}/sync-service-flow/count`);
  }

  /**
   * search - POST sync-service-flow/search
   *
   * @param options - Body parameter
   * @returns Observable<QueryResultDto<SyncServiceFlowDto>>
   */
  search(options: SyncServiceFlowSearchOptionsDto): Observable<QueryResultDto<SyncServiceFlowDto>> {
    return this.http.post<QueryResultDto<SyncServiceFlowDto>>(`${this.BASE_URL}/sync-service-flow/search`, options);
  }

  /**
   * searchCount - POST sync-service-flow/search/count
   *
   * @param options - Body parameter
   * @returns Observable<{ count: number; }>
   */
  searchCount(options: Omit<SyncServiceFlowSearchOptionsDto, 'includeFlowDefinition' | 'limit' | 'offset'>): Observable<{ count: number }> {
    return this.http.post<{ count: number }>(`${this.BASE_URL}/sync-service-flow/search/count`, options);
  }

  /**
   * findByFlowId - GET sync-service-flow/flow-id/:flowId
   *
   * @param flowId - Param parameter
   * @param includeFlowDefinition - Query parameter
   * @returns Observable<SyncServiceFlowDto>
   */
  findByFlowId(flowId: string, includeFlowDefinition?: boolean): Observable<SyncServiceFlowDto> {
    let url = `${this.BASE_URL}/sync-service-flow/flow-id/:flowId`;
    url = url.replace(':flowId', flowId.toString());
    let params = new HttpParams();
    if (includeFlowDefinition !== undefined) {
      params = params.set('includeFlowDefinition', includeFlowDefinition.toString());
    }
    return this.http.get<SyncServiceFlowDto>(url, { params });
  }

  /**
   * findByMessageId - GET sync-service-flow/message-id/:messageId
   *
   * @param messageId - Param parameter
   * @param includeFlowDefinition - Query parameter
   * @returns Observable<SyncServiceFlowDto[]>
   */
  findByMessageId(messageId: string, includeFlowDefinition?: boolean): Observable<SyncServiceFlowDto[]> {
    let url = `${this.BASE_URL}/sync-service-flow/message-id/:messageId`;
    url = url.replace(':messageId', messageId.toString());
    let params = new HttpParams();
    if (includeFlowDefinition !== undefined) {
      params = params.set('includeFlowDefinition', includeFlowDefinition.toString());
    }
    return this.http.get<SyncServiceFlowDto[]>(url, { params });
  }

  /**
   * findByOrgCode - GET sync-service-flow/org-code/:orgCode
   *
   * @param includeFlowDefinition - Query parameter
   * @param limit - Query parameter
   * @param offset - Query parameter
   * @returns Observable<SyncServiceFlowDto[]>
   */
  findByOrgCode(includeFlowDefinition?: boolean, limit?: number, offset?: number): Observable<SyncServiceFlowDto[]> {
    const url = `${this.BASE_URL}/sync-service-flow/org-code`;
    let params = new HttpParams();
    if (includeFlowDefinition !== undefined) {
      params = params.set('includeFlowDefinition', includeFlowDefinition.toString());
    }
    if (limit !== undefined) {
      params = params.set('limit', limit.toString());
    }
    if (offset !== undefined) {
      params = params.set('offset', offset.toString());
    }
    return this.http.get<SyncServiceFlowDto[]>(url, { params });
  }

  /**
   * countByOrgCode - GET sync-service-flow/org-code/:orgCode/count
   *
   * @returns Observable<{ count: number; }>
   */
  countByOrgCode(): Observable<{ count: number }> {
    const url = `${this.BASE_URL}/sync-service-flow/org-code/count`;
    return this.http.get<{ count: number }>(url);
  }

  /**
   * findByStatus - GET sync-service-flow/status/:status
   *
   * @param status - Param parameter
   * @param includeFlowDefinition - Query parameter
   * @param limit - Query parameter
   * @param offset - Query parameter
   * @returns Observable<SyncServiceFlowDto[]>
   */
  findByStatus(status: string, includeFlowDefinition?: boolean, limit?: number, offset?: number): Observable<SyncServiceFlowDto[]> {
    let url = `${this.BASE_URL}/sync-service-flow/status/:status`;
    url = url.replace(':status', status.toString());
    let params = new HttpParams();
    if (includeFlowDefinition !== undefined) {
      params = params.set('includeFlowDefinition', includeFlowDefinition.toString());
    }
    if (limit !== undefined) {
      params = params.set('limit', limit.toString());
    }
    if (offset !== undefined) {
      params = params.set('offset', offset.toString());
    }
    return this.http.get<SyncServiceFlowDto[]>(url, { params });
  }

  /**
   * countByStatus - GET sync-service-flow/status/:status/count
   *
   * @param status - Param parameter
   * @returns Observable<{ count: number; }>
   */
  countByStatus(status: string): Observable<{ count: number }> {
    let url = `${this.BASE_URL}/sync-service-flow/status/:status/count`;
    url = url.replace(':status', status.toString());
    return this.http.get<{ count: number }>(url);
  }

  /**
   * findByCreatedAt - GET sync-service-flow/created-at
   *
   * @param from - Query parameter
   * @param to - Query parameter
   * @param includeFlowDefinition - Query parameter
   * @param limit - Query parameter
   * @param offset - Query parameter
   * @returns Observable<SyncServiceFlowDto[]>
   */
  findByCreatedAt(
    from: string,
    to: string,
    includeFlowDefinition?: boolean,
    limit?: number,
    offset?: number,
  ): Observable<SyncServiceFlowDto[]> {
    let params = new HttpParams();
    if (from !== undefined) {
      params = params.set('from', from.toString());
    }
    if (to !== undefined) {
      params = params.set('to', to.toString());
    }
    if (includeFlowDefinition !== undefined) {
      params = params.set('includeFlowDefinition', includeFlowDefinition.toString());
    }
    if (limit !== undefined) {
      params = params.set('limit', limit.toString());
    }
    if (offset !== undefined) {
      params = params.set('offset', offset.toString());
    }
    return this.http.get<SyncServiceFlowDto[]>(`${this.BASE_URL}/sync-service-flow/created-at`, { params });
  }

  /**
   * findById - GET sync-service-flow/:id
   *
   * @param id - Param parameter
   * @param includeFlowDefinition - Query parameter
   * @returns Observable<SyncServiceFlowDto>
   */
  findById(id: string, includeFlowDefinition?: boolean): Observable<SyncServiceFlowDto> {
    let url = `${this.BASE_URL}/sync-service-flow/:id`;
    url = url.replace(':id', id.toString());
    let params = new HttpParams();
    if (includeFlowDefinition !== undefined) {
      params = params.set('includeFlowDefinition', includeFlowDefinition.toString());
    }
    return this.http.get<SyncServiceFlowDto>(url, { params });
  }

  /**
   * findByIdWithParsedWorkflow - GET sync-service-flow/:id/with-workflow
   *
   * @param id - Param parameter
   * @returns Observable<{ flow: SyncServiceFlowDto; workflow: IMdWorkflow; }>
   */
  findByIdWithParsedWorkflow(id: string): Observable<{ flow: SyncServiceFlowDto; workflow: IMdWorkflow }> {
    let url = `${this.BASE_URL}/sync-service-flow/:id/with-workflow`;
    url = url.replace(':id', id.toString());
    return this.http.get<{ flow: SyncServiceFlowDto; workflow: IMdWorkflow }>(url);
  }

  /**
   * create - POST sync-service-flow//
   *
   * @param createData - Body parameter
   * @returns Observable<SyncServiceFlowDto>
   */
  create(createData: SyncServiceFlowDto): Observable<SyncServiceFlowDto> {
    return this.http.post<SyncServiceFlowDto>(`${this.BASE_URL}/sync-service-flow`, createData);
  }

  /**
   * update - PUT sync-service-flow/:id
   *
   * @param id - Param parameter
   * @param updateData - Body parameter
   * @returns Observable<SyncServiceFlowDto>
   */
  update(id: string, updateData: Partial<SyncServiceFlowDto>): Observable<SyncServiceFlowDto> {
    let url = `${this.BASE_URL}/sync-service-flow/:id`;
    url = url.replace(':id', id.toString());
    return this.http.put<SyncServiceFlowDto>(url, updateData);
  }

  /**
   * updateByFlowId - PUT sync-service-flow/flow-id/:flowId
   *
   * @param flowId - Param parameter
   * @param updateData - Body parameter
   * @returns Observable<SyncServiceFlowDto>
   */
  updateByFlowId(flowId: string, updateData: Partial<SyncServiceFlowDto>): Observable<SyncServiceFlowDto> {
    let url = `${this.BASE_URL}/sync-service-flow/flow-id/:flowId`;
    url = url.replace(':flowId', flowId.toString());
    return this.http.put<SyncServiceFlowDto>(url, updateData);
  }

  /**
   * delete - DELETE sync-service-flow/:id
   *
   * @param id - Param parameter
   * @returns Observable<{ deleted: boolean; }>
   */
  delete(id: string): Observable<{ deleted: boolean }> {
    let url = `${this.BASE_URL}/sync-service-flow/:id`;
    url = url.replace(':id', id.toString());
    return this.http.delete<{ deleted: boolean }>(url);
  }

  /**
   * deleteByFlowId - DELETE sync-service-flow/flow-id/:flowId
   *
   * @param flowId - Param parameter
   * @returns Observable<{ deleted: boolean; }>
   */
  deleteByFlowId(flowId: string): Observable<{ deleted: boolean }> {
    let url = `${this.BASE_URL}/sync-service-flow/flow-id/:flowId`;
    url = url.replace(':flowId', flowId.toString());
    return this.http.delete<{ deleted: boolean }>(url);
  }
}
