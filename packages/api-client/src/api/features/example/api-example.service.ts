import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ExampleDto } from '@monorepo-kit/types';
import { BaseApiService } from '../../../services/base-api.service';
import { AppConfigService } from '../../../services/app-config.service';

/**
 * ApiExampleService - Angular service for ExampleController
 * Auto-generated by gen-api-client.ts
 */
@Injectable({
  providedIn: 'root'
})
export class ApiExampleService extends BaseApiService {

  constructor(http: HttpClient, config: AppConfigService) {
    super(http, config);
  }

  /**
   * findAll - GET examples/examples//
   *
   * @param name - Query parameter
   * @returns Observable<ExampleDto[]>
   */
  findAll(name?: string): Observable<ExampleDto[]> {
    let params = new HttpParams();
    if (name !== undefined) {
      params = params.set('name', name.toString());
    }
    return this.http.get<ExampleDto[]>(
      `${this.BASE_URL}/examples/examples`,
      { params }
    );
  }

  /**
   * getCount - GET examples/examples/count
   *
   * @returns Observable<{ count: number; }>
   */
  getCount(): Observable<{ count: number; }> {
    return this.http.get<{ count: number; }>(
      `${this.BASE_URL}/examples/examples/count`,
    );
  }

  /**
   * findOne - GET examples/examples/:id
   *
   * @param id - Param parameter
   * @returns Observable<ExampleDto>
   */
  findOne(id: string): Observable<ExampleDto> {
    let url = `${this.BASE_URL}/examples/examples/:id`;
    url = url.replace(':id', id.toString());
    return this.http.get<ExampleDto>(
      url,
    );
  }

  /**
   * create - POST examples/examples//
   *
   * @param createExampleDto - Body parameter
   * @returns Observable<ExampleDto>
   */
  create(createExampleDto: Omit<ExampleDto, "id">): Observable<ExampleDto> {
    return this.http.post<ExampleDto>(
      `${this.BASE_URL}/examples/examples`,
      createExampleDto
    );
  }

  /**
   * update - PUT examples/examples/:id
   *
   * @param id - Param parameter
   * @param updateExampleDto - Body parameter
   * @returns Observable<ExampleDto>
   */
  update(id: string, updateExampleDto: Partial<ExampleDto>): Observable<ExampleDto> {
    let url = `${this.BASE_URL}/examples/examples/:id`;
    url = url.replace(':id', id.toString());
    return this.http.put<ExampleDto>(
      url,
      updateExampleDto
    );
  }

  /**
   * advancedUpdate - PATCH examples/examples/:id/status/:statusId
   *
   * @param id - Param parameter
   * @param statusId - Param parameter
   * @param updateData - Body parameter
   * @param priority - Query parameter
   * @param category - Query parameter
   * @param assignee - Query parameter
   * @param dueDate - Query parameter
   * @returns Observable<{ success: boolean; message: string; data: { id: string; statusId: string; priority: string; category: string; assignee: string; dueDate: string; sessionInfo: { sessionId: string; userId?: string; timestamp: string; }; updateData: any; processedBy: string; }; }>
   */
  advancedUpdate(id: string, statusId: string, updateData: { notes?: string; metadata?: Record<string, any>; }, priority?: string, category?: string, assignee?: string, dueDate?: string): Observable<{ success: boolean; message: string; data: { id: string; statusId: string; priority: string; category: string; assignee: string; dueDate: string; sessionInfo: { sessionId: string; userId?: string; timestamp: string; }; updateData: any; processedBy: string; }; }> {
    let url = `${this.BASE_URL}/examples/examples/:id/status/:statusId`;
    url = url.replace(':id', id.toString());
    url = url.replace(':statusId', statusId.toString());
    let params = new HttpParams();
    if (priority !== undefined) {
      params = params.set('priority', priority.toString());
    }
    if (category !== undefined) {
      params = params.set('category', category.toString());
    }
    if (assignee !== undefined) {
      params = params.set('assignee', assignee.toString());
    }
    if (dueDate !== undefined) {
      params = params.set('dueDate', dueDate.toString());
    }
    return this.http.patch<{ success: boolean; message: string; data: { id: string; statusId: string; priority: string; category: string; assignee: string; dueDate: string; sessionInfo: { sessionId: string; userId?: string; timestamp: string; }; updateData: any; processedBy: string; }; }>(
      url,
      updateData,
      { params }
    );
  }

  /**
   * remove - DELETE examples/examples/:id
   *
   * @param id - Param parameter
   * @returns Observable<void>
   */
  remove(id: string): Observable<void> {
    let url = `${this.BASE_URL}/examples/examples/:id`;
    url = url.replace(':id', id.toString());
    return this.http.delete<void>(
      url,
    );
  }

}
