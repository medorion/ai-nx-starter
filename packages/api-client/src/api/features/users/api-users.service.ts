import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ResetPasswordDto, UserDto, UsersByChannelDto, UserInSessionDto } from '@medorion/types';
import { BaseApiService } from '../../../services/base-api.service';
import { AppConfigService } from '../../../services/app-config.service';

/**
 * ApiUsersService - Angular service for UsersController
 * Auto-generated by gen-api-client.ts
 */
@Injectable({
  providedIn: 'root'
})
export class ApiUsersService extends BaseApiService {

  constructor(http: HttpClient, config: AppConfigService) {
    super(http, config);
  }

  /**
   * resetUserPassword - POST users/reset-password
   *
   * @param resetPasswordDto - Body parameter
   * @returns Observable<void>
   */
  resetUserPassword(resetPasswordDto: ResetPasswordDto): Observable<void> {
    return this.http.post<void>(
      `${this.BASE_URL}/users/reset-password`,
      resetPasswordDto
    );
  }

  /**
   * getUsers - GET users//
   *
   * @returns Observable<UserDto[]>
   */
  getUsers(): Observable<UserDto[]> {
    return this.http.get<UserDto[]>(
      `${this.BASE_URL}/users`,
    );
  }

  /**
   * getUsersByChannel - GET users/channel
   *
   * @returns Observable<UsersByChannelDto>
   */
  getUsersByChannel(): Observable<UsersByChannelDto> {
    return this.http.get<UsersByChannelDto>(
      `${this.BASE_URL}/users/channel`,
    );
  }

  /**
   * sessions - GET users/sessions/:lastSeconds
   *
   * @param lastSeconds - Param parameter
   * @returns Observable<UserInSessionDto[]>
   */
  sessions(lastSeconds: number): Observable<UserInSessionDto[]> {
    let url = `${this.BASE_URL}/users/sessions/:lastSeconds`;
    url = url.replace(':lastSeconds', lastSeconds.toString());
    return this.http.get<UserInSessionDto[]>(
      url,
    );
  }

}
