import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SolutionDto } from '@medorion/types';
import { BaseApiService } from '../../../services/base-api.service';
import { AppConfigService } from '../../../services/app-config.service';

/**
 * ApiSolutionsService - Angular service for SolutionsController
 * Auto-generated by gen-api-client.ts
 */
@Injectable({
  providedIn: 'root'
})
export class ApiSolutionsService extends BaseApiService {

  constructor(http: HttpClient, config: AppConfigService) {
    super(http, config);
  }

  /**
   * findAll - GET solutions//
   *
   * @param limit - Query parameter
   * @param offset - Query parameter
   * @returns Observable<SolutionDto[]>
   */
  findAll(limit?: number, offset?: number): Observable<SolutionDto[]> {
    let params = new HttpParams();
    if (limit !== undefined) {
      params = params.set('limit', limit.toString());
    }
    if (offset !== undefined) {
      params = params.set('offset', offset.toString());
    }
    return this.http.get<SolutionDto[]>(
      `${this.BASE_URL}/solutions`,
      { params }
    );
  }

  /**
   * count - GET solutions/count
   *
   * @returns Observable<{ count: number; }>
   */
  count(): Observable<{ count: number; }> {
    return this.http.get<{ count: number; }>(
      `${this.BASE_URL}/solutions/count`,
    );
  }

  /**
   * countActive - GET solutions/count/active
   *
   * @returns Observable<{ count: number; }>
   */
  countActive(): Observable<{ count: number; }> {
    return this.http.get<{ count: number; }>(
      `${this.BASE_URL}/solutions/count/active`,
    );
  }

  /**
   * findByOrgCode - GET solutions/org
   *
   * @returns Observable<SolutionDto[]>
   */
  findByOrgCode(): Observable<SolutionDto[]> {
    return this.http.get<SolutionDto[]>(
      `${this.BASE_URL}/solutions/org`,
    );
  }

  /**
   * findActiveByOrgCode - GET solutions/org/active
   *
   * @returns Observable<SolutionDto[]>
   */
  findActiveByOrgCode(): Observable<SolutionDto[]> {
    return this.http.get<SolutionDto[]>(
      `${this.BASE_URL}/solutions/org/active`,
    );
  }

  /**
   * countByOrgCode - GET solutions/org/count
   *
   * @returns Observable<{ count: number; }>
   */
  countByOrgCode(): Observable<{ count: number; }> {
    return this.http.get<{ count: number; }>(
      `${this.BASE_URL}/solutions/org/count`,
    );
  }

  /**
   * findByAppCode - GET solutions/app-code/:appCode
   *
   * @param appCode - Param parameter
   * @returns Observable<SolutionDto>
   */
  findByAppCode(appCode: number): Observable<SolutionDto> {
    let url = `${this.BASE_URL}/solutions/app-code/:appCode`;
    url = url.replace(':appCode', appCode.toString());
    return this.http.get<SolutionDto>(
      url,
    );
  }

  /**
   * findByOrgCodeAndAppCode - GET solutions/org/app-code/:appCode
   *
   * @param appCode - Param parameter
   * @returns Observable<SolutionDto>
   */
  findByOrgCodeAndAppCode(appCode: number): Observable<SolutionDto> {
    let url = `${this.BASE_URL}/solutions/org/app-code/:appCode`;
    url = url.replace(':appCode', appCode.toString());
    return this.http.get<SolutionDto>(
      url,
    );
  }

  /**
   * findByUserId - GET solutions/user/:userId
   *
   * @param userId - Param parameter
   * @returns Observable<SolutionDto[]>
   */
  findByUserId(userId: string): Observable<SolutionDto[]> {
    let url = `${this.BASE_URL}/solutions/user/:userId`;
    url = url.replace(':userId', userId.toString());
    return this.http.get<SolutionDto[]>(
      url,
    );
  }

  /**
   * findActiveByUserId - GET solutions/user/:userId/active
   *
   * @param userId - Param parameter
   * @returns Observable<SolutionDto[]>
   */
  findActiveByUserId(userId: string): Observable<SolutionDto[]> {
    let url = `${this.BASE_URL}/solutions/user/:userId/active`;
    url = url.replace(':userId', userId.toString());
    return this.http.get<SolutionDto[]>(
      url,
    );
  }

  /**
   * existsByAppCode - GET solutions/validate/app-code/:appCode
   *
   * @param appCode - Param parameter
   * @returns Observable<{ exists: boolean; }>
   */
  existsByAppCode(appCode: number): Observable<{ exists: boolean; }> {
    let url = `${this.BASE_URL}/solutions/validate/app-code/:appCode`;
    url = url.replace(':appCode', appCode.toString());
    return this.http.get<{ exists: boolean; }>(
      url,
    );
  }

  /**
   * existsByOrgCodeAndAppCode - GET solutions/validate/org/app-code/:appCode
   *
   * @param appCode - Param parameter
   * @returns Observable<{ exists: boolean; }>
   */
  existsByOrgCodeAndAppCode(appCode: number): Observable<{ exists: boolean; }> {
    let url = `${this.BASE_URL}/solutions/validate/org/app-code/:appCode`;
    url = url.replace(':appCode', appCode.toString());
    return this.http.get<{ exists: boolean; }>(
      url,
    );
  }

  /**
   * findById - GET solutions/:id
   *
   * @param id - Param parameter
   * @returns Observable<SolutionDto>
   */
  findById(id: string): Observable<SolutionDto> {
    let url = `${this.BASE_URL}/solutions/:id`;
    url = url.replace(':id', id.toString());
    return this.http.get<SolutionDto>(
      url,
    );
  }

  /**
   * create - POST solutions//
   *
   * @param createData - Body parameter
   * @returns Observable<SolutionDto>
   */
  create(createData: SolutionDto): Observable<SolutionDto> {
    return this.http.post<SolutionDto>(
      `${this.BASE_URL}/solutions`,
      createData
    );
  }

  /**
   * update - PUT solutions/:id
   *
   * @param id - Param parameter
   * @param updateData - Body parameter
   * @returns Observable<SolutionDto>
   */
  update(id: string, updateData: Partial<SolutionDto>): Observable<SolutionDto> {
    let url = `${this.BASE_URL}/solutions/:id`;
    url = url.replace(':id', id.toString());
    return this.http.put<SolutionDto>(
      url,
      updateData
    );
  }

  /**
   * setActiveStatus - PUT solutions/:id/status
   *
   * @param id - Param parameter
   * @param isActive - Body parameter
   * @returns Observable<SolutionDto>
   */
  setActiveStatus(id: string, isActive: boolean): Observable<SolutionDto> {
    let url = `${this.BASE_URL}/solutions/:id/status`;
    url = url.replace(':id', id.toString());
    return this.http.put<SolutionDto>(
      url,
      isActive
    );
  }

  /**
   * addAllowedUser - PUT solutions/:id/users/:userId
   *
   * @param id - Param parameter
   * @param userId - Param parameter
   * @returns Observable<SolutionDto>
   */
  addAllowedUser(id: string, userId: string): Observable<SolutionDto> {
    let url = `${this.BASE_URL}/solutions/:id/users/:userId`;
    url = url.replace(':id', id.toString());
    url = url.replace(':userId', userId.toString());
    return this.http.put<SolutionDto>(
      url,
      {}
    );
  }

  /**
   * removeAllowedUser - DELETE solutions/:id/users/:userId
   *
   * @param id - Param parameter
   * @param userId - Param parameter
   * @returns Observable<SolutionDto>
   */
  removeAllowedUser(id: string, userId: string): Observable<SolutionDto> {
    let url = `${this.BASE_URL}/solutions/:id/users/:userId`;
    url = url.replace(':id', id.toString());
    url = url.replace(':userId', userId.toString());
    return this.http.delete<SolutionDto>(
      url,
    );
  }

  /**
   * delete - DELETE solutions/:id
   *
   * @param id - Param parameter
   * @returns Observable<{ deleted: boolean; }>
   */
  delete(id: string): Observable<{ deleted: boolean; }> {
    let url = `${this.BASE_URL}/solutions/:id`;
    url = url.replace(':id', id.toString());
    return this.http.delete<{ deleted: boolean; }>(
      url,
    );
  }

}
