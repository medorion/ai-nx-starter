import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ClientUserDto, CreateUserDto, UpdateUserDto } from '@monorepo-kit/types';
import { BaseApiService } from '../../../services/base-api.service';
import { AppConfigService } from '../../../services/app-config.service';

/**
 * ApiUserService - Angular service for UserController
 * Auto-generated by gen-api-client.ts
 */
@Injectable({
  providedIn: 'root'
})
export class ApiUserService extends BaseApiService {

  constructor(http: HttpClient, config: AppConfigService) {
    super(http, config);
  }

  /**
   * findAll - GET users//
   *
   * @param limit - Query parameter
   * @param offset - Query parameter
   * @returns Observable<ClientUserDto[]>
   */
  findAll(limit?: number, offset?: number): Observable<ClientUserDto[]> {
    let params = new HttpParams();
    if (limit !== undefined) {
      params = params.set('limit', limit.toString());
    }
    if (offset !== undefined) {
      params = params.set('offset', offset.toString());
    }
    return this.http.get<ClientUserDto[]>(
      `${this.BASE_URL}/users`,
      { params }
    );
  }

  /**
   * getCount - GET users/count
   *
   * @returns Observable<{ count: number; }>
   */
  getCount(): Observable<{ count: number; }> {
    return this.http.get<{ count: number; }>(
      `${this.BASE_URL}/users/count`,
    );
  }

  /**
   * findByEmail - GET users/email/:email
   *
   * @param email - Param parameter
   * @returns Observable<ClientUserDto>
   */
  findByEmail(email: string): Observable<ClientUserDto> {
    let url = `${this.BASE_URL}/users/email/:email`;
    url = url.replace(':email', email.toString());
    return this.http.get<ClientUserDto>(
      url,
    );
  }

  /**
   * findById - GET users/:id
   *
   * @param id - Param parameter
   * @returns Observable<ClientUserDto>
   */
  findById(id: string): Observable<ClientUserDto> {
    let url = `${this.BASE_URL}/users/:id`;
    url = url.replace(':id', id.toString());
    return this.http.get<ClientUserDto>(
      url,
    );
  }

  /**
   * create - POST users//
   *
   * @param createUserDto - Body parameter
   * @returns Observable<ClientUserDto>
   */
  create(createUserDto: CreateUserDto): Observable<ClientUserDto> {
    return this.http.post<ClientUserDto>(
      `${this.BASE_URL}/users`,
      createUserDto
    );
  }

  /**
   * update - PUT users/:id
   *
   * @param id - Param parameter
   * @param updateUserDto - Body parameter
   * @returns Observable<ClientUserDto>
   */
  update(id: string, updateUserDto: UpdateUserDto): Observable<ClientUserDto> {
    let url = `${this.BASE_URL}/users/:id`;
    url = url.replace(':id', id.toString());
    return this.http.put<ClientUserDto>(
      url,
      updateUserDto
    );
  }

  /**
   * delete - DELETE users/:id
   *
   * @param id - Param parameter
   * @returns Observable<void>
   */
  delete(id: string): Observable<void> {
    let url = `${this.BASE_URL}/users/:id`;
    url = url.replace(':id', id.toString());
    return this.http.delete<void>(
      url,
    );
  }

}
