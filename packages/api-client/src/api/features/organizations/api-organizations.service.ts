import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrganizationDto, OrganizationStatus, UpdateOrganizationDataDto } from '@medorion/types';
import { BaseApiService } from '../../../services/base-api.service';
import { AppConfigService } from '../../../services/app-config.service';

/**
 * ApiOrganizationsService - Angular service for OrganizationsController
 * Auto-generated by gen-api-client.ts
 */
@Injectable({
  providedIn: 'root'
})
export class ApiOrganizationsService extends BaseApiService {

  constructor(http: HttpClient, config: AppConfigService) {
    super(http, config);
  }

  /**
   * findAll - GET organizations//
   *
   * @param limit - Query parameter
   * @param offset - Query parameter
   * @returns Observable<OrganizationDto[]>
   */
  findAll(limit?: number, offset?: number): Observable<OrganizationDto[]> {
    let params = new HttpParams();
    if (limit !== undefined) {
      params = params.set('limit', limit.toString());
    }
    if (offset !== undefined) {
      params = params.set('offset', offset.toString());
    }
    return this.http.get<OrganizationDto[]>(
      `${this.BASE_URL}/organizations`,
      { params }
    );
  }

  /**
   * count - GET organizations/count
   *
   * @returns Observable<{ count: number; }>
   */
  count(): Observable<{ count: number; }> {
    return this.http.get<{ count: number; }>(
      `${this.BASE_URL}/organizations/count`,
    );
  }

  /**
   * findByStatus - GET organizations/status/:status
   *
   * @param status - Param parameter
   * @returns Observable<OrganizationDto[]>
   */
  findByStatus(status: OrganizationStatus): Observable<OrganizationDto[]> {
    let url = `${this.BASE_URL}/organizations/status/:status`;
    url = url.replace(':status', status.toString());
    return this.http.get<OrganizationDto[]>(
      url,
    );
  }

  /**
   * countByStatus - GET organizations/status/:status/count
   *
   * @param status - Param parameter
   * @returns Observable<{ count: number; }>
   */
  countByStatus(status: OrganizationStatus): Observable<{ count: number; }> {
    let url = `${this.BASE_URL}/organizations/status/:status/count`;
    url = url.replace(':status', status.toString());
    return this.http.get<{ count: number; }>(
      url,
    );
  }

  /**
   * searchByName - GET organizations/search
   *
   * @param name - Query parameter
   * @returns Observable<OrganizationDto[]>
   */
  searchByName(name: string): Observable<OrganizationDto[]> {
    let params = new HttpParams();
    if (name !== undefined) {
      params = params.set('name', name.toString());
    }
    return this.http.get<OrganizationDto[]>(
      `${this.BASE_URL}/organizations/search`,
      { params }
    );
  }

  /**
   * findByName - GET organizations/name/:name
   *
   * @param name - Param parameter
   * @returns Observable<OrganizationDto>
   */
  findByName(name: string): Observable<OrganizationDto> {
    let url = `${this.BASE_URL}/organizations/name/:name`;
    url = url.replace(':name', name.toString());
    return this.http.get<OrganizationDto>(
      url,
    );
  }

  /**
   * findByCode - GET organizations/code/:code
   *
   * @param code - Param parameter
   * @returns Observable<OrganizationDto>
   */
  findByCode(code: string): Observable<OrganizationDto> {
    let url = `${this.BASE_URL}/organizations/code/:code`;
    url = url.replace(':code', code.toString());
    return this.http.get<OrganizationDto>(
      url,
    );
  }

  /**
   * isCodeUnique - GET organizations/validate/code/:code
   *
   * @param code - Param parameter
   * @param excludeId - Query parameter
   * @returns Observable<{ isUnique: boolean; }>
   */
  isCodeUnique(code: string, excludeId?: string): Observable<{ isUnique: boolean; }> {
    let url = `${this.BASE_URL}/organizations/validate/code/:code`;
    url = url.replace(':code', code.toString());
    let params = new HttpParams();
    if (excludeId !== undefined) {
      params = params.set('excludeId', excludeId.toString());
    }
    return this.http.get<{ isUnique: boolean; }>(
      url,
      { params }
    );
  }

  /**
   * isNameUnique - GET organizations/validate/name/:name
   *
   * @param name - Param parameter
   * @param excludeId - Query parameter
   * @returns Observable<{ isUnique: boolean; }>
   */
  isNameUnique(name: string, excludeId?: string): Observable<{ isUnique: boolean; }> {
    let url = `${this.BASE_URL}/organizations/validate/name/:name`;
    url = url.replace(':name', name.toString());
    let params = new HttpParams();
    if (excludeId !== undefined) {
      params = params.set('excludeId', excludeId.toString());
    }
    return this.http.get<{ isUnique: boolean; }>(
      url,
      { params }
    );
  }

  /**
   * findById - GET organizations/:id
   *
   * @param id - Param parameter
   * @returns Observable<OrganizationDto>
   */
  findById(id: string): Observable<OrganizationDto> {
    let url = `${this.BASE_URL}/organizations/:id`;
    url = url.replace(':id', id.toString());
    return this.http.get<OrganizationDto>(
      url,
    );
  }

  /**
   * create - POST organizations//
   *
   * @param createData - Body parameter
   * @returns Observable<OrganizationDto>
   */
  create(createData: OrganizationDto): Observable<OrganizationDto> {
    return this.http.post<OrganizationDto>(
      `${this.BASE_URL}/organizations`,
      createData
    );
  }

  /**
   * update - PUT organizations/:id
   *
   * @param id - Param parameter
   * @param updateData - Body parameter
   * @returns Observable<OrganizationDto>
   */
  update(id: string, updateData: UpdateOrganizationDataDto): Observable<OrganizationDto> {
    let url = `${this.BASE_URL}/organizations/:id`;
    url = url.replace(':id', id.toString());
    return this.http.put<OrganizationDto>(
      url,
      updateData
    );
  }

  /**
   * updateStatus - PUT organizations/:id/status
   *
   * @param id - Param parameter
   * @param status - Body parameter
   * @returns Observable<OrganizationDto>
   */
  updateStatus(id: string, status: OrganizationStatus): Observable<OrganizationDto> {
    let url = `${this.BASE_URL}/organizations/:id/status`;
    url = url.replace(':id', id.toString());
    return this.http.put<OrganizationDto>(
      url,
      status
    );
  }

  /**
   * delete - DELETE organizations/:id
   *
   * @param id - Param parameter
   * @returns Observable<{ deleted: boolean; }>
   */
  delete(id: string): Observable<{ deleted: boolean; }> {
    let url = `${this.BASE_URL}/organizations/:id`;
    url = url.replace(':id', id.toString());
    return this.http.delete<{ deleted: boolean; }>(
      url,
    );
  }

}
